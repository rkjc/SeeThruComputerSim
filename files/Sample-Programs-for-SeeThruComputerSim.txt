
These examples can be run by editing the source file BareBonesBinarySimComputer.py and replacing the array initialization data with one of these pre-loaded snapshots of a program already written into memory.



#--------------------------------------------------
# default empty memory
memory = ["00000000", # 0000 
          "00000000", # 0001 
          "00000000", # 0010 
          "00000000", # 0011 
          "00000000", # 0100 
          "00000000", # 0101 
          "00000000", # 0110 
          "00000000", # 0111 
          "00000000", # 1000 
          "00000000", # 1001 
          "00000000", # 1010 
          "00000000", # 1011 
          "00000000", # 1100 
          "00000000", # 1101 
          "00000000", # 1110 
          "00000000"] # 1111

#--------------------------------------------------
# add two numbers and store result
memory = ["10001010", # 0000 LOAD 1010
          "10101011", # 0001 ADD 1011
          "10011111", # 0010 STORE 1111
          "11110000", # 0011 STOP 
          "00000000", # 0100 
          "00000000", # 0101 
          "00000000", # 0110 
          "00000000", # 0111 
          "00000000", # 1000 
          "00000000", # 1001 
          "00101001", # 1010 
          "00001001", # 1011 
          "00000000", # 1100 
          "00000000", # 1101 
          "00000000", # 1110 
          "00000000"] # 1111

#--------------------------------------------------
# subtract two numbers
memory = ["10001010", # 0000 LOAD 1010 
          "10111011", # 0001 SUB 1011
          "10011111", # 0010 STORE 1111 
          "11110000", # 0011 STOP
          "00000000", # 0100 
          "00000000", # 0101 
          "00000000", # 0110 
          "00000000", # 0111 
          "00000000", # 1000 
          "00000000", # 1001 
          "00100001", # 1010 
          "00001001", # 1011 
          "00000000", # 1100 
          "00000000", # 1101 
          "00000000", # 1110 
          "00000000"] # 1111

#--------------------------------------------------
# load a number and shift-right x4, store result
memory = ["10001001", # 0000 LOAD 1001 
          "00010000", # 0001 SHIFTR 
          "00010000", # 0010 SHIFTR
          "00010000", # 0011 SHIFTR
          "00010000", # 0100 SHIFTR
          "10011101", # 0101 STORE 1101
          "11110000", # 0110 STOP
          "00000000", # 0111 
          "00000000", # 1000 
          "10011101", # 1001 
          "00000000", # 1010 
          "00000000", # 1011 
          "00000000", # 1100 
          "00000000", # 1101 
          "00000000", # 1110 
          "00000000"] # 1111

#--------------------------------------------------
# count to 3
memory = ["10001111", # 0000 LOAD 1111 
          "10101110", # 0001 ADD 1110
          "10011111", # 0010 STOR 1111
          "01101101", # 0011 XOR 1101
          "11010110", # 0100 IFZERO 0111
          "11000000", # 0101 GOTO 0000
          "00000000", # 0110 
          "11110000", # 0111 STOP
          "00000000", # 1000 
          "00000000", # 1001  
          "00000000", # 1010 
          "00000000", # 1011 
          "00000000", # 1100 
          "00000011", # 1101 xor comparison value
          "00000001", # 1110 increment value
          "00000000"] # 1111 save copy accum

#--------------------------------------------------- 
# count to 9
memory = ["10001111", # 0000 LOAD 1111 
          "10101110", # 0001 ADD 1110
          "10011111", # 0010 STOR 1111
          "01101101", # 0011 XOR 1101
          "11010110", # 0100 IFZERO 0110
          "11000000", # 0101 GOTO 0000
          "11110000", # 0110 STOP
          "00000000", # 0111 
          "00000000", # 1000 
          "00000000", # 1001  
          "00000000", # 1010 
          "00000000", # 1011 
          "00000000", # 1100 
          "00001001", # 1001 xor comparison value 
          "00000001", # 1110 increment value
          "00000000"] # 1111 save temp copy of accum 
          
#---------------------------------------------------

#XOR compare values for match
memory = ["10001010", # 0000 LOAD 1010 (val X)
          "01101100", # 0001 XOR 1100  (val W)
          "11010111", # 0010 IFZERO 0111 
          "10001110", # 0011 LOAD 1110 (no match)
          "11110000", # 0100 STOP
          "00000000", # 0101 
          "00000000", # 0110 
          "10001111", # 0111 LOAD 1111 (match)
          "11110000", # 1000 STOP
          "00000000", # 1001 
          "01001110", # 1010 val X 
          "00000000", # 1011 
          "01000101", # 1100 val W 
          "00000000", # 1101 
          "11100000", # 1110 indicator for no match
          "00000111"] # 1111 indicator for a match

#---------------------------------------------------

# Load Direct example
memory = ["10000110", # 0000 LOAD DIRECT 0110
          "11110000", # 0001 STOP
          "00000000", # 0010
          "00000000", # 0011
          "00000000", # 0100
          "00000000", # 0101
          "11011101", # 0110 data
          "00000000", # 0111
          "00000000", # 1000
          "00000000", # 1001
          "00000000", # 1010
          "00000000", # 1011
          "00000000", # 1100
          "00000000", # 1101
          "00000000", # 1110
          "00000000"] # 1111

#---------------------------------------------------

# Load Indirect example
memory = ["01110110", # 0000 LOAD INDIRECT 0110
          "11110000", # 0001 STOP
          "00000000", # 0010
          "00000000", # 0011
          "00000000", # 0100
          "00000000", # 0101
          "00001101", # 0110 data (address pointer)
          "00000000", # 0111
          "00000000", # 1000
          "00000000", # 1001
          "00000000", # 1010
          "00000000", # 1011
          "00000000", # 1100
          "01111110", # 1101 data
          "00000000", # 1110
          "00000000"] # 1111

#---------------------------------------------------

# Load Immeadiate example
memory = ["11100101", # 0000 LOAD IMEADIATE
          "11110000", # 0001 STOP
          "00000000", # 0010
          "00000000", # 0011
          "00000000", # 0100
          "00000000", # 0101
          "00000000", # 0110
          "00000000", # 0111
          "00000000", # 1000
          "00000000", # 1001
          "00000000", # 1010
          "00000000", # 1011
          "00000000", # 1100
          "00000000", # 1101
          "00000000", # 1110
          "00000000"] # 1111

#---------------------------------------------------




