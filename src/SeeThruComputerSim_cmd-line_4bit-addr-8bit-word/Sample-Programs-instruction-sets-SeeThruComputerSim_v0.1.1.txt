
SeeThruComputer_cl_4-8bit_v0.1.1.py 

======================================================================================
operation:
----
to run the program in the memory enter the charachter
 a
at the prompt and hit enter
the Program counter will be set to 0000
and it will run the instruction at memory location 0000

----
to enter data into the memory location indicated by the Program Counter
enter the letter b followed by 8 1s or 0s, with no spaces

example:
b10010101
then hit enter
will store the binary value 10010101

---
move the program counter

c1010
will move it to the memory address 1010
---
change the clock speed in milliseconds
d500
will set it to run an instruction every 0.5 seconds

d0
will set it to run manually, press the enter key to run the net instruction.
======================================================================================
# - instruction set:

#   opcode	Name	Description

#    0000    NOP     no operation, does nothing

# ---- logic operations ----
# shift
#    0001	SHIFTR 	Bit shift the accumulator to the right by 1 position.
#    0010	SHIFTL 	Bit shift the accumulator to the left by 1 position.)

# boolean
#    0011	NOT 	Binary NOT the accumulator. The value 10101111 becomes 01010000.
#    0100	AND 	Binary AND the accumulator with the value stored at an address.
#    0101	OR 	    Binary OR the accumulator with the value stored at an address.
#    0110	XOR 	Binary XOR the accumulator with the value stored at an address.

# ---- memory  data transfer operations ----
#    1000	LOAD 	Load the accumulator with the value stored at an address.
#    1001	STORE 	Copy the accumulator into an address.

# ---- arithmetic operations ----
#    1010	ADD 	Add the value stored at an address to the accumulator.
#    1011	SUB 	Subtract the value stored at an address from the accumulator.

# ---- control operations ----
# branch
#    1100	GOTO 	Jump to a program address.
#    1101	IFZERO 	If the accumulator is zero, jump to a program address.

#    1111	STOP 	Stop program execution.


#====================================================================================
These examples can be run by editing the source file BareBonesBinarySimComputer.py and replacing the array initialization data with one of these pre-loaded snapshots of a program already written into memory.
Programs:
#--------------------------------------------------
# default empty memory
memory = ["00000000", # 0000 
          "00000000", # 0001 
          "00000000", # 0010 
          "00000000", # 0011 
          "00000000", # 0100 
          "00000000", # 0101 
          "00000000", # 0110 
          "00000000", # 0111 
          "00000000", # 1000 
          "00000000", # 1001 
          "00000000", # 1010 
          "00000000", # 1011 
          "00000000", # 1100 
          "00000000", # 1101 
          "00000000", # 1110 
          "00000000"] # 1111

#--------------------------------------------------
# add two numbers and store result
memory = ["10001010", # 0000 LOAD 1010
          "10101011", # 0001 ADD 1011
          "10011111", # 0010 STORE 1111
          "11110000", # 0011 STOP 
          "00000000", # 0100 
          "00000000", # 0101 
          "00000000", # 0110 
          "00000000", # 0111 
          "00000000", # 1000 
          "00000000", # 1001 
          "00101001", # 1010 
          "00001001", # 1011 
          "00000000", # 1100 
          "00000000", # 1101 
          "00000000", # 1110 
          "00000000"] # 1111

#--------------------------------------------------
# subtract two numbers
memory = ["10001010", # 0000 LOAD 1010 
          "10111011", # 0001 SUB 1011
          "10011111", # 0010 STORE 1111 
          "11110000", # 0011 STOP
          "00000000", # 0100 
          "00000000", # 0101 
          "00000000", # 0110 
          "00000000", # 0111 
          "00000000", # 1000 
          "00000000", # 1001 
          "00100001", # 1010 
          "00001001", # 1011 
          "00000000", # 1100 
          "00000000", # 1101 
          "00000000", # 1110 
          "00000000"] # 1111

#--------------------------------------------------
# load a number and shift-right x4, store result
memory = ["10001001", # 0000 LOAD 1001 
          "00010000", # 0001 SHIFTR 
          "00010000", # 0010 SHIFTR
          "00010000", # 0011 SHIFTR
          "00010000", # 0100 SHIFTR
          "10011101", # 0101 STORE 1101
          "11110000", # 0110 STOP
          "00000000", # 0111 
          "00000000", # 1000 
          "10011101", # 1001 
          "00000000", # 1010 
          "00000000", # 1011 
          "00000000", # 1100 
          "00000000", # 1101 
          "00000000", # 1110 
          "00000000"] # 1111

#--------------------------------------------------
# count to 3
memory = ["10001111", # 0000 LOAD 1111 
          "10101110", # 0001 ADD 1110
          "10011111", # 0010 STOR 1111
          "01101101", # 0011 XOR 1101
          "11010110", # 0100 IFZERO 0111
          "11000000", # 0101 GOTO 0000
          "00000000", # 0110 
          "11110000", # 0111 STOP
          "00000000", # 1000 
          "00000000", # 1001  
          "00000000", # 1010 
          "00000000", # 1011 
          "00000000", # 1100 
          "00000011", # 1101 xor comparison value
          "00000001", # 1110 increment value
          "00000000"] # 1111 save copy accum

 #--------------------------------------------------
# count to 3 with output
memory = ["10001111", # 0000 LOAD 1111 
          "10101110", # 0001 ADD 1110
          "10011111", # 0010 STOR 1111
          "00101111", # 0011 PRINT from 1111
          "01101101", # 0100 XOR 1101
          "11010111", # 0101 IFZERO 0111
          "11000000", # 0110 GOTO 0000
          "11110000", # 0111 STOP
          "00000000", # 1000 
          "00000000", # 1001  
          "00000000", # 1010 
          "00000000", # 1011 
          "00000000", # 1100 
          "00000011", # 1101 xor comparison value
          "00000001", # 1110 increment value
          "00000000"] # 1111 save copy accum
          
 #--------------------------------------------------
# count to 2B with output
memory = ["10001111", # 0000 LOAD 1111 
          "10101110", # 0001 ADD 1110
          "10011111", # 0010 STOR 1111
          "00101111", # 0011 PRINT from 1111
          "01101101", # 0100 XOR 1101
          "11010111", # 0101 IFZERO 0111
          "11000000", # 0110 GOTO 0000
          "11110000", # 0111 STOP
          "00000000", # 1000 
          "00000000", # 1001  
          "00000000", # 1010 
          "00000000", # 1011 
          "00000000", # 1100 
          "00101011", # 1101 xor comparison value
          "00000001", # 1110 increment value
          "00000000"] # 1111 save copy accum

#--------------------------------------------------- 
# count to 9
memory = ["10001111", # 0000 LOAD 1111 
          "10101110", # 0001 ADD 1110
          "10011111", # 0010 STOR 1111
          "01101101", # 0011 XOR 1101
          "11010110", # 0100 IFZERO 0110
          "11000000", # 0101 GOTO 0000
          "11110000", # 0110 STOP
          "00000000", # 0111 
          "00000000", # 1000 
          "00000000", # 1001  
          "00000000", # 1010 
          "00000000", # 1011 
          "00000000", # 1100 
          "00001001", # 1001 xor comparison value 
          "00000001", # 1110 increment value
          "00000000"] # 1111 save temp copy of accum 
          
#---------------------------------------------------

#XOR compare values for match
memory = ["10001010", # 0000 LOAD 1010 (val X)
          "01101100", # 0001 XOR 1100  (val W)
          "11010111", # 0010 IFZERO 0111 
          "10001110", # 0011 LOAD 1110 (no match)
          "11110000", # 0100 STOP
          "00000000", # 0101 
          "00000000", # 0110 
          "10001111", # 0111 LOAD 1111 (match)
          "11110000", # 1000 STOP
          "00000000", # 1001 
          "01001110", # 1010 val X 
          "00000000", # 1011 
          "01000101", # 1100 val W 
          "00000000", # 1101 
          "11100000", # 1110 indicator for no match
          "00000111"] # 1111 indicator for a match

#---------------------------------------------------


